# ****************************************************************************# Author: Haley Kong# Date Created: Fri Sep 13 19:20:26 2024# Project: matplotlib learning## Version History# ---------------# <13-09-2024> Initial Version## *****************************************************************************""" One-line Description:"""# Standard importsimport textwrapimport numpy as npfrom matplotlib import pyplot as pltimport matplotlib as mpl# 3rd Party package imports# Local imports# -----------------------------------------------------------------------------# CONSTANTSSTYLES = ['-o', '--^', '-.D', ':p']COLORS = ['b', 'g', 'r', 'y']NROWS = 2NCOLS = 2# -----------------------------------------------------------------------------# CLASSES# -----------------------------------------------------------------------------# FUNCTIONSdef log(x):    return np.log(x)def root(x):    return np.sqrt(x)def linear(x):    return xdef square(x):    return x ** 2# -----------------------------------------------------------------------------# -------------------# Common Line Styles# -------------------# '-' : Solid line# '--' : Dashed line# '-.' : Dash-dot line# ':' : Dotted line# -------------------# Marker Options# -------------------# 'o' : Circle marker# '^' : Triangle up marker# 'v' : Triangle down marker# 's' : Square marker# 'p' : Pentagon marker# '*' : Star marker# '+' : Plus marker# 'x' : Cross marker# 'D' : Diamond markerFUNCTIONS = [log, root, linear, square]x = np.arange(1, 10, 1)############################################################################### Graph multiple lines on the same plotfh1, ax1 = plt.subplots()for style, func in zip(STYLES, FUNCTIONS):    ax1.plot(x, func(x), style, label=func.__name__)ax1.set_title("Hello, World")ax1.set_xlabel("X-axis")ax1.set_ylabel("Y-axis")ax1.grid()ax1.legend()############################################################################### Graph multiple axes on a single plotfh, axs = plt.subplots(nrows=NROWS, ncols=NCOLS)for ii in range(NROWS):    for jj in range(NCOLS):        idx = (ii * NROWS) + jj        axs[ii, jj].plot(x, FUNCTIONS[idx](x), STYLES[idx],                         label=FUNCTIONS[idx].__name__, color=COLORS[idx])        axs[ii, jj].set_title(FUNCTIONS[idx].__name__.upper())# Automatically adjust subplot parameters to give paddingplt.tight_layout()############################################################################### Configure plot settingsdef config_ax(ax, minor_color="r", ycolor="", xcolor="", width=60):    """Standardize Ky-anh's favourite plot settings    Parameters    ----------    ax : matplotlib axes object        Axes to configure.    minor_color : str, optional        Color for minor gridlines. The default is "r".    ycolor : str, optional        Color for y-axis labels. The default is "".    xcolor : str, optional        Color for x-axis labels. The default is "".    width : int, optional        Maximum width for wrapping the title. The default is 60 characters.    Returns    -------    Modified ax object.    """    ax.grid(which="major", color="k", linestyle="-", alpha=0.25)    ax.grid(which="minor", color=minor_color, linestyle=":", alpha=0.25)    ax.minorticks_on()    ax.tick_params(        axis="x", which="both", bottom=True, top=False, labelbottom=True    )    ax.xaxis.set_tick_params(labelbottom=True)    ax.yaxis.set_tick_params(labelleft=True)    if len(ycolor) > 0:        ax.yaxis.label.set_color(ycolor)        ax.tick_params(axis="y", colors=ycolor)    if len(xcolor) > 0:        ax.xaxis.label.set_color(xcolor)        ax.tick_params(axis="x", colors=xcolor)    # Check if there is a label    if ax.get_legend_handles_labels()[1]:        ax.legend(loc="upper right")        uniquify_leg(ax)    # Wrap title if necessary    cur_title = ax.get_title()    wrap_title = "\n".join(textwrap.wrap(cur_title, width))    ax.set_title(wrap_title)    return axdef uniquify_leg(ax):    """Removes duplicate entries from the legend of an axis    Parameters    ----------    ax : matplotlib ax object    Returns    -------    leg: legend object    """    # Uniquify legend    handles, labels = ax.get_legend_handles_labels()    by_label = dict(zip(labels, handles))    leg = ax.legend(by_label.values(), by_label.keys(), fontsize=8)    return leg############################################################################### Set up parametersksize = np.arange(1, 10, 1)step = ksize[1] - ksize[0]# Initialize colorbar settingscmap = plt.get_cmap("jet", len(ksize))  # Color map choicenorm = mpl.colors.Normalize(vmin=-step / 2.0, vmax=max(ksize) + step / 2.0)# Color bar scalingsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)############################################################################### %% Explicitly Visualize Colormapsimport matplotlib.pyplot as pltimport numpy as np# Generate a 2D gradient array to represent each colormap visuallygradient = np.linspace(0, 1, 256)gradient = np.vstack((gradient, gradient))  # Stack to make it 2D# Create a figure with 4 subplots (2 rows, 2 columns)fig, axs = plt.subplots(2, 2, figsize=(8, 6))# List of colormaps to usecolormaps = ['jet', 'inferno', 'plasma', 'viridis']# Titles for each subplottitles = ['Jet', 'Inferno', 'Plasma', 'Viridis']# Plot each colormap in a subplotfor ax, cmap, title in zip(axs.flat, colormaps, titles):    # Display the gradient using the colormap    ax.imshow(gradient, aspect='auto', cmap=plt.get_cmap(cmap))    ax.set_title(title)  # Set the title of the subplot    ax.axis('off')  # Turn off the axis labels# Adjust layout to prevent overlapplt.tight_layout()# Show the figureplt.show()############################################################################### %% Plot All Colormapsimport matplotlib.pyplot as pltimport numpy as npNROWS = 4NCOLS = 8# Generate a 2D gradient array to represent each colormap visuallygradient = np.linspace(0, 1, 256)gradient = np.vstack((gradient, gradient))  # Stack to make it 2D# List of colormaps to use# plt.colormaps() will return a list of strings that includes every colormapcolormaps = [c for c in plt.colormaps()]plot_idx = 0num_plots_per_fig = NROWS * NCOLSfigs = []# Iterate over all plotswhile plot_idx < len(colormaps):    # Create new figure    fh, axs = plt.subplots(nrows=NROWS, ncols=NCOLS, figsize=(15, 15))    subplot_idx = 0    # Add subplots to the figure until the figure is full    while plot_idx < len(colormaps) and subplot_idx < num_plots_per_fig:        # Calculate indices        r = subplot_idx // NCOLS        c = subplot_idx % NCOLS        ax = axs[r, c]        color = colormaps[plot_idx]        # Display the gradient using the colormap        ax.imshow(gradient, aspect='auto',                  cmap=plt.get_cmap(color))        # Set the title of the subplot        ax.set_title(f"{color}: {plot_idx}, {subplot_idx}")        ax.axis('off')  # Turn off axis labels        subplot_idx += 1        plot_idx += 1    figs.append((fh, ax))